/**
* Site Object
* @author Michael Orji
*/
var Site = Site || {}

Site.Util = Site.Util || 
{
	runAjax : function(configObj)
	{
		var emptyFunction = function(){}
		
		new XHR({
			type               : configObj.requestMethod,
			url                : configObj.requestURL,
			async              : true,
			timeout            : configObj.timeoutAfter || 30,
			requestData        : configObj.requestData,
			debugCallback      : configObj.debugCallback || emptyFunction,
			readyStateCallback : configObj.readyStateCallback || emptyFunction,
			successCallback    : configObj.successCallback || emptyFunction,
			errorCallback      : configObj.errorCallback || emptyFunction
		});
	}, //end of runAjax method

	parseAjaxResponse : function(response)
	{  
		if(typeof response == 'object')
		{
			return response;
		}
		else if (typeof response == 'string')
		{
			return ( this.isEmpty(response) ? {} : eval( '(' + response + ')' ) );
		}
		else
		{
			alert("Invalid Ajax Return type <<" + response + ">>" + "\n" + "Check Site.Util.parseAjaxResponse for more information");
		}
	}, //end of parseAjaxResponse
	
	isEmpty : function(val)
	{
		if( (typeof val == 'undefined') || (val == 'undefined') || isEmpty(val) )
		{
			return true;
		}
		return false;
	},
	
	monthInt2MonthStr : function(mnth, isShort)
	{
		switch(parseInt(mnth)) 
		{
			case 1:  return isShort ? "Jan" : "January"; 
			case 2:  return isShort ? "Feb" : "February";
			case 3:  return isShort ? "Mar" : "March";   
			case 4:  return isShort ? "Apr" : "April";
			case 5:  return isShort ? "May" : "May";
			case 6:  return isShort ? "Jun" : "June";
			case 7:  return isShort ? "Jul" : "July";
			case 8:  return isShort ? "Aug" : "August";
			case 9:  return isShort ? "Sep" : "September";
			case 10: return isShort ? "Oct" : "October";
			case 11: return isShort ? "Nov" : "November";
			case 12: return isShort ? "Dec" : "December";
		}
	},
	
	//@credits: http://stackoverflow.com/questions/4793604/how-to-do-insert-after-in-javascript-without-using-a-library
	insertAfter : function(newNode, referenceNode)
	{
		referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
	},
	
	/*
	* @credits:
	* 1: http://stackoverflow.com/questions/126100/how-to-efficiently-count-the-number-of-keys-properties-of-an-object-in-javascrip
	* 2: http://stackoverflow.com/questions/956719/number-of-elements-in-a-javascript-object
	*/
	getObjectLength : function(obj)
	{
		return Object.keys(obj).length;
	},
	
	inArray : function(needle, haystack)
	{
		for (var i = 0, len = haystack.length; i < len; i++)
		{
			if (haystack[i] === needle)
			{
				return true;
			}
		}
		return false;
	},
	
	/*
	* @credits: https://gist.github.com/gordonbrander/2230317
	* @date: April 23, 2015
	*/
	generateUniqueString : function () 
	{
		// Generate unique IDs for use as pseudo-private/protected names.
		// Similar in concept to
		// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
		//
		// The goals of this function are twofold:
		// 
		// * Provide a way to generate a string guaranteed to be unique when compared
		//   to other strings generated by this function.
		// * Make the string complex enough that it is highly unlikely to be
		//   accidentally duplicated by hand (this is key if you're using `ID`
		//   as a private/protected name on an object).
		//
		// Use:
		//
		//     var privateName = ID();
		//     var o = { 'public': 'foo' };
		//     o[privateName] = 'bar';
	
		// Math.random should be unique because of its seeding algorithm.
		// Convert it to base 36 (numbers + letters), and grab the first 9 characters
		// after the decimal.
		//return '_' + Math.random().toString(36).substr(2, 9);
		return '_' + Math.random().toString(36).substr(2, 6);
	}, //end of generateUniqueString
	
	escapeHtml : function(unsafe) 
	{
		return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
	},
	
	popup : function(url, width, height, top, left)
	{
		//screen centering functionality credits: http://stackoverflow.com/a/16861050/1743192
		var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
		var dualScreenTop  = window.screenTop  != undefined ? window.screenTop  : screen.top;

		var centerWidth  = window.innerWidth  ? window.innerWidth  : document.documentElement.clientWidth  ? document.documentElement.clientWidth  : screen.width;
		var centerHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

		var centerLeft = ((centerWidth / 2)  - (width / 2))  + dualScreenLeft;
		var centerTop  = ((centerHeight / 2) - (height / 2)) + dualScreenTop;
		
		top = top   || centerTop;
		left = left || centerLeft;
		var newWindow = window.open(url,'','menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=' + width + ',height=' + height + ',top=' + top + ',left=' + left);
		
		// Puts focus on the newWindow
		if (window.focus)
		{
			newWindow.focus();
		}
		
		return newWindow;
	},
	
	openLinkInPopup : function(linkID)
	{
		return this.popup($O(linkID).href, 600, 600);
	},
	
	/*
	* @param opts object whose members include:
	* message string the message to display
	* dialogID the ID of the dialog Box, this can be used to get the dialog instance, default is a unique string
	*/
	displayDialog : function(opts)
	{   
		opts          = opts || {};
		var msg       = opts.message || '';
		
		alert(msg);
	},
	
	//@credits: http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
	getQueryStringParameterValue : function(name)
	{
		name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
		var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
		return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
	},
	
	getQueryStringPrefix : function()
	{
		return location.search ? "&" : "?";
	},
	
	isValidEmail : function(email)
	{
		var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;			
		return re.test(email);
	}, 
	
	disableElement : function(elem)
	{
		$O(elem).disabled = true;
		$O(elem).readonly = true;
		//$O(elem).className += ' disabled';
		Site.Util.addClassTo(elem, 'disabled')
	},
	
	enableElement : function(elem)
	{
		$O(elem).disabled = false;
		$O(elem).readonly = false;
		//$O(elem).className = $O(elem).className.replace('disabled', '');
		Site.Util.removeClassFrom(elem, 'disabled')
	},
	
	addClassTo : function(elem)
	{
		var classToAdd = arguments[1];
		elem = $O(elem);
		
		var classStr = '';
		
		if(typeof classToAdd === 'string')
		{
			classStr += classToAdd;
			Site.Util.removeClassFrom(elem, classToAdd); //if the element had that classname, remove it so we don't duplicate the classname
		}
		else
		{
			for(var i = 0, len = classToAdd.length; i < len; i++)
			{
				currClassName = classToAdd[i];
				classStr += ( (typeof currClassName === 'string') ? (currClassName + ' ') : '' );
				Site.Util.removeClassFrom(elem, currClassName); //if the element had that classname, remove it so we don't duplicate the classname
			}
		}
		
		elem.className = trim( elem.className ) + ' ' + classStr;
	},
	
	removeClassFrom : function(elem, classToRemove)
	{
		elem = $O(elem);
		elem.className = trim( elem.className.replace(classToRemove, '') );
	},
	
	trim : function(str)
	{
		return trim(str);
	},
	
	//credits: http://stackoverflow.com/a/2490876/1743192
	triggerEvent : function (element, eventType)
	{
		element = $O(element);
		
		var event; // The custom event that will be created

	    if (document.createEvent)
		{
			event = document.createEvent("HTMLEvents");
			event.initEvent(eventType, true, true);
		} 
		else
		{
			event = document.createEventObject();
			event.eventType = eventType;
		}

		event.eventName = eventType;

		if (document.createEvent)
		{
			element.dispatchEvent(event);
		} 
		else
		{
			element.fireEvent("on" + event.eventType, event);
		}
	},
	
	fadeIn : function(elemId, opts) 
	{
		opts = opts || {};
		var opacityLevel = 0;
		var maxOpacity = opts.maxOpacity || 1;
		var speed = opts.speed || 5000;
		while(opacityLevel <= maxOpacity)
		{
			setTimeout( "$Opacity('" + elemId + "'," + opacityLevel + ")",  (opacityLevel * speed));
			opacityLevel += 0.01;
		}
		
		if(typeof opts.onComplete === 'function')
		{
			opts.onComplete();
		}
	},

	fadeOut : function(elemId, opts)
	{
		opts = opts || {};
		var opacityLevel = 1;
		var timer = 0;
		var minOpacity = opts.minOpacity || 0;
		var speed = opts.speed || 5000;
		
		while(opacityLevel > minOpacity)
		{    
			setTimeout( "$Opacity('" + elemId + "'," + opacityLevel + ")", (timer * speed));
			timer += 0.01;
			opacityLevel -= 0.01;
		}
		
		if(typeof opts.onComplete === 'function')
		{
			opts.onComplete();
		}
	},
	
	//credits: http://stackoverflow.com/a/3177985/1743192
	formatCount : function  (rep) 
	{
		rep = rep+''; // coerce to string
		if (rep < 1000)
		{
			return rep;
		}
		if (rep < 10000)
		{ 
			return rep.charAt(0) + ',' + rep.substring(1);
		}
		
		return (rep/1000).toFixed(rep % 1000 != 0)+'k';
	}
}//end of Site.Util

Site.UserModel = Site.UserModel ||
{
	/*
	* @param suppliedData JS object. Members:
	* email:string, password:string, other data members you wish to associate with current user
	* debugCallback:function(optional), readyStateCallback:function(optional), successCallback:function
	* 
	* NOTE: 
	* 2. The debugCallback, if specified, auto-receives the reply from the Ajax-call, for use in debugging
	* 3. The SuccessCallback auto-receives the parsed response (text, html, json, xml), depending on the type of response expected
	*/
	registerUser : function(suppliedData)
	{
		var signupData = {};
		var data =
		{
			email                 : '', 
			password              : '',
			requestURL            : '', //siteURL + '/user-auth/' : this page does registration only for requests coming from social-authentication,
			readyStateCallback    : function(){},
			debugCallback         : function(reply){},
			successCallback       : function(parsedResponse){},
			errorCallback         : function(xhrObject, aborted){}
		}
		
		for(var x in suppliedData)
		{
			data[x] = suppliedData[x];
		}
		
		if(typeof data.successCallback !== 'function')
		{
			Site.Util.displayDialog({'message':'Site.UserModel.RegisterUser Error: SuccessCallback must be a function'});
			return;
		}
	
		for(var x in data)
		{
			if( (typeof data[x] !== 'function') && (typeof x === 'string') && (data[x] != 'requestURL') )
			{
				signupData[x] = data[x];
			}
		}
	
		Site.Util.runAjax
		({
			requestMethod      : 'POST',
			requestURL         : data.requestURL,
			requestData        : "action=register_user&data=" + JSON.stringify(signupData),
			debugCallback      : function(reply){ if(typeof data.debugCallback == 'function'){data.debugCallback(reply)} },
			readyStateCallback : function(){ if(typeof data.readyStateCallback == 'function'){data.readyStateCallback()} },
			successCallback    : function(reply){ data.successCallback(Site.Util.parseAjaxResponse(reply.parsedValue)) },//'rawValue':rawValue, 'toString'
			errorCallback      : function(xhrObject, aborted){ if(typeof data.errorCallback === 'function'){data.errorCallback(xhrObject, aborted)} }
		});
	}, //end of registerUser
	
	loginUser : function(suppliedData)
	{
		var data = 
		{
			userLogin                 : '',
			userPassword              : '',
			rememberUser              : '',  
			emptyLoginFieldError      : '',
			emptyPasswordFieldError   : '',
			unverifiedAccountError    : '',
			requestURL                : siteURL + '/user-auth',
			readyStateCallback        : function(){},
			debugCallback             : function(reply){},
			successCallback           : function(parsedResponse){},
			errorCallback             : function(xhrObject, aborted){}
		}
		
		for(var x in suppliedData)
		{
			data[x] = suppliedData[x];
		}
		
		if(typeof data.successCallback != 'function')
		{
			Site.Util.displayDialog({'message':'Site.UserModel.loginUser Error: SuccessCallback must be a function'});
			return;
		}
	
		Site.Util.runAjax
		({
			requestMethod      : 'POST',
			requestURL         : data.requestURL,
			requestData        : "action=login_user&data=" + JSON.stringify(data),
			debugCallback      : function(reply){ if(typeof data.debugCallback == 'function'){data.debugCallback(reply)} },
			readyStateCallback : function(){ if(typeof data.readyStateCallback == 'function'){data.readyStateCallback()} },
			successCallback    : function(reply){ data.successCallback(Site.Util.parseAjaxResponse(reply.parsedValue)) },//'rawValue':rawValue, 'toString'
			errorCallback      : function(xhrObject, aborted){ if(typeof data.errorCallback === 'function'){data.errorCallback(xhrObject, aborted)} }
		});
	}
}//end of Site.UserModel

Site.Event = Site.Event ||
{
	addLoadListener : function(callback)
	{
		EventManager.addLoadListener(callback);
	},
	
	attachListener : function (target, eventType, functionRef, capture)
	{
		EventManager.attachEventListener(target, eventType, functionRef, capture);
	},
	
	detachListener : function (target, eventType, functionRef, capture)
	{
		EventManager.detachEventListener(target, eventType, functionRef, capture);
	},
	
	cancelDefaultAction : function(e)
	{ 
		EventManager.cancelDefaultAction(e);
	},
	
	stopPropagation : function(e)
	{
		EventManager.stopEventPropagation(e);
	},
	
	getEventTarget : function(e)
	{
		return EventManager.eventTarget(e);
	}
}